"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[447],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return d}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),p=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(r),d=o,f=m["".concat(u,".").concat(d)]||m[d]||l[d]||i;return r?n.createElement(f,a(a({ref:t},c),{},{components:r})):n.createElement(f,a({ref:t},c))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},59:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return l}});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],s={},u=void 0,p={unversionedId:"tutorials/Compression/Optimizer",id:"tutorials/Compression/Optimizer",title:"Optimizer",description:"view3d-optimizer is a Nodej.js CLI tool that can be used along with View3D.",source:"@site/docs/tutorials/Compression/Optimizer.mdx",sourceDirName:"tutorials/Compression",slug:"/tutorials/Compression/Optimizer",permalink:"/egjs-view3d/docs/tutorials/Compression/Optimizer",editUrl:"https://github.com/naver/egjs-view3d/edit/main/demo/docs/tutorials/Compression/Optimizer.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Basis Universal (KTX2)",permalink:"/egjs-view3d/docs/tutorials/Compression/Basisu"}},c={},l=[{value:"Meshopt &amp; Basis Universal &amp; Maximum texture size to 2048",id:"meshopt--basis-universal--maximum-texture-size-to-2048",level:4},{value:"Draco &amp; WebP Textures &amp; Force JPG textures &amp; Progressive texture loading (256 -&gt; 2048)",id:"draco--webp-textures--force-jpg-textures--progressive-texture-loading-256---2048",level:4}],m={toc:l};function d(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/naver/egjs-view3d/tree/main/packages/view3d-optimizer"},"view3d-optimizer")," is a Nodej.js CLI tool that can be used along with View3D.",(0,i.kt)("br",{parentName:"p"}),"\n","It can optimize 3D models with compression methods like Draco, Meshopt, and BasisU."),(0,i.kt)("p",null,"The followings are common instruction examples"),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"meshopt--basis-universal--maximum-texture-size-to-2048"},"Meshopt & Basis Universal & Maximum texture size to 2048"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"view3d-optimizer -i model.glb -tc -m -tm 2048\n")),(0,i.kt)("h4",{id:"draco--webp-textures--force-jpg-textures--progressive-texture-loading-256---2048"},"Draco & WebP Textures & Force JPG textures & Progressive texture loading (256 -> 2048)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"view3d-optimizer -i model.glb -w --force-jpg -t0 256 -tm 2048\n")))}d.isMDXComponent=!0}}]);